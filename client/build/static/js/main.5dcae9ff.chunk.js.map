{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Row","Video","video","App","useState","yourID","setYourID","enableMyVideo","setEnableMyVideo","enableMyAudio","setEnableMyAudio","users","setUsers","stream","setStream","videoTracks","setVideoTracks","audioTracks","setAudioTracks","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","userVideo","useRef","partnerVideo","socket","useEffect","current","socketIoClient","activateMediaDevices","on","id","data","from","signal","UserVideo","PartnerVideo","incomingCall","navigator","mediaDevices","getUserMedia","audio","then","srcObject","getVideoTracks","getAudioTracks","console","log","playsInline","muted","ref","autoPlay","onClick","peer","Peer","initiator","trickle","emit","to","Object","keys","map","key","userToCall","signalData","callPeer","user","track","stop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5dcae9ff.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport socketIoClient from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport styled from 'styled-components';\nimport './App.css';\n\nconst ENDPOINT = '/';\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst Video = styled.video`\n  border: 1px solid blue;\n  width: 50%;\n  height: 50vh;\n  margin-bottom: 3rem;\n`;\n\nfunction App() {\n  const [yourID, setYourID] = useState('');\n  const [enableMyVideo, setEnableMyVideo] = useState(true);\n  const [enableMyAudio, setEnableMyAudio] = useState(true);\n  const [users, setUsers] = useState({});\n  const [stream, setStream] = useState();\n  const [videoTracks, setVideoTracks] = useState([]);\n  const [audioTracks, setAudioTracks] = useState([]);\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [caller, setCaller] = useState('');\n  const [callerSignal, setCallerSignal] = useState();\n  const [callAccepted, setCallAccepted] = useState(false);\n\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n  const socket = useRef();\n\n  useEffect(() => {\n    socket.current = socketIoClient(ENDPOINT);\n\n    activateMediaDevices();\n\n    socket.current.on('yourID', (id) => {\n      setYourID(id);\n    });\n\n    socket.current.on('allUsers', (users) => {\n      setUsers(users);\n    });\n\n    socket.current.on('hey', (data) => {\n      setReceivingCall(true);\n      setCaller(data.from);\n      setCallerSignal(data.signal);\n    });\n  }, []);\n\n  const activateMediaDevices = () => {\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then((stream) => {\n        setStream(stream);\n        if (userVideo.current) {\n          userVideo.current.srcObject = stream;\n        }\n\n        setVideoTracks(stream.getVideoTracks());\n        setAudioTracks(stream.getAudioTracks());\n\n        console.log(stream.getVideoTracks());\n        console.log(stream.getAudioTracks());\n      });\n  };\n\n  const changeStatusMyVideo = () => {\n    setEnableMyVideo(!enableMyVideo);\n    if (enableMyVideo) {\n      videoTracks.map((track) => track.stop());\n    } else {\n      activateMediaDevices();\n    }\n  };\n\n  const changeStatusMyAudio = () => {\n    setEnableMyAudio(!enableMyAudio);\n    if (enableMyAudio) {\n      audioTracks.map((track) => track.stop());\n    } else {\n      activateMediaDevices();\n    }\n  };\n\n  const callPeer = (id) => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n\n    peer.on('signal', (data) => {\n      socket.current.emit('callUser', {\n        userToCall: id,\n        signalData: data,\n        from: yourID\n      });\n    });\n\n    peer.on('stream', (stream) => {\n      if (partnerVideo.current) {\n        partnerVideo.current.srcObject = stream;\n      }\n    });\n\n    socket.current.on('callAccepted', (signal) => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n  };\n\n  const acceptCall = () => {\n    setCallAccepted(true);\n\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n\n    peer.on('signal', (data) => {\n      socket.current.emit('acceptCall', { signal: data, to: caller });\n    });\n\n    peer.on('stream', (stream) => {\n      partnerVideo.current.srcObject = stream;\n    });\n\n    peer.signal(callerSignal);\n  };\n\n  let UserVideo;\n  if (stream) {\n    UserVideo = <Video playsInline muted ref={userVideo} autoPlay />;\n  }\n\n  let PartnerVideo;\n  if (callAccepted) {\n    PartnerVideo = <Video playsInline ref={partnerVideo} autoPlay />;\n  }\n\n  let incomingCall;\n  if (receivingCall) {\n    incomingCall = (\n      <div>\n        <h1>{caller} is calling you</h1>\n        <button onClick={acceptCall}>Aceptar</button>\n      </div>\n    );\n  }\n\n  return (\n    <Container>\n      <Row>\n        {UserVideo}\n        {PartnerVideo}\n      </Row>\n      <Row>\n        {Object.keys(users).map((key) => {\n          if (key === yourID) {\n            return null;\n          }\n          return (\n            <button key={key} onClick={() => callPeer(key)}>\n              Llamar a {key}\n            </button>\n          );\n        })}\n      </Row>\n      <Row>{incomingCall}</Row>\n      <div>\n        <h3>Mi Id: {yourID}</h3>\n        <h5>Sockets:</h5>\n        <ol>\n          {Object.keys(users).map((user) => (\n            <li key={user}>{user}</li>\n          ))}\n        </ol>\n        <button onClick={changeStatusMyVideo}>Pausar video</button>\n        <button onClick={changeStatusMyAudio}>Sileciar micr√≥fono</button>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}